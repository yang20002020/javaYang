HashSet<String> hs =new HashSet< >();

    //添加元素
    hs.add("hello");
    hs.add("world");
    hs.add("java");

-----------------------------------------------------------
// HashSet 类中的函数
public boolean add(E e) {
     return map.put(e, PRESENT)==null;
}
------------------------------------------------
//上述的put方法如下：
public V put(K key, V value) {
    return putVal(hash(key), key, value, false, true);
}
--------------------------------------------------------
//上述调用了hash方法
static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}
--------------------------------------------------------
//参数一 hash值是根据元素的hashcode方法得到的
//参数二 “hello” add函数追加的元素
final V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict) {
    Node<K,V>[] tab; Node<K,V> p; int n, i;
    //如果哈希表没有初始化，就对其初始化
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;
     //根据 对象的哈希值计算对象的储存位置，如果该位置没有元素，就储存元素
    if ((p = tab[i = (n - 1) & hash]) == null) //如果没有元素，就储存元素
        tab[i] = newNode(hash, key, value, null);// 存储元素
    else {
        Node<K,V> e; K k;
        //如果该位置有元素
        // 存入的元素和以前的元素 比较哈希值  p.hash == hash
            // p.hash == hash如果哈希值不同，会继续向下执行，把元素添加到集合
            // p.hash == hash如果哈希值相同，会调用对象的equals方法进行比较
                 // (key != null && key.equals(k))如果返回false,会继续向下执行，把元素添加到集合
                 //(key != null && key.equals(k))如果返回true, 说明元素重复，不存储：e = p;
        if (p.hash == hash &&
            ((k = p.key) == key || (key != null && key.equals(k))))
            e = p;
        else if (p instanceof TreeNode)
            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
        else {
            for (int binCount = 0; ; ++binCount) {
                if ((e = p.next) == null) {
                    p.next = newNode(hash, key, value, null);
                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    break;
                }
                if (e.hash == hash &&
                    ((k = e.key) == key || (key != null && key.equals(k))))
                    break;
                p = e;
            }
        }
        if (e != null) { // existing mapping for key
            V oldValue = e.value;
            if (!onlyIfAbsent || oldValue == null)
                e.value = value;
            afterNodeAccess(e);
            return oldValue;
        }
    }
    ++modCount;
    if (++size > threshold)
        resize();
    afterNodeInsertion(evict);
    return null;
}